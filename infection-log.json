{"stats":{"totalMutantsCount":32,"killedCount":7,"killedByStaticAnalysisCount":0,"notCoveredCount":0,"escapedCount":25,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":21.88,"mutationCodeCoverage":100,"coveredCodeMsi":21.88},"escaped":[{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputToLabelHtmlTagMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<label type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<label type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.6c17d19387b4ff5b8912ead5915edb8f.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputToSelectHtmlTagMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<select type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<select type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.bc417fb10902085357800a9da110e096.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputToButtonHtmlTagMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<button type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<button type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.33f898a7fa501bc0ba99b01e4412a990.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.017, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputToTextareaHtmlTagMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<textarea type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<textarea type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.a928372d4d81636654126081a01114bf.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.014, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputToFieldsetHtmlTagMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<fieldset type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<fieldset type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.dcbece2af0067e6bea65d4264d189bd4.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"text\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"text\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.05abd473ee8eb34c8a4a11a8419096a5.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"password\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"password\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.5351f6b70ab81c5444f374fea0f1cac3.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"checkbox\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"checkbox\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.224014a6b10fdd1831c9dbca81fd2297.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 186 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.019, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"radio\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"radio\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.3cc4b2479bbec1916ec507d27dba8342.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.024, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"file\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"file\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.3b9fba389485c2843a798bd6d11b6e7b.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"submit\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"submit\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.08cbf56f33e31faf46b5890be3e927fc.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"reset\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"reset\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.21e2fa76c90603d7924a0ca93186724b.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.014, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"button\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"button\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.02126cd7c330d0b76eb1e52bb69ada77.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"number\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"number\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.5c14abc062155ab0aefe050db9b4e503.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"date\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"date\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.048326a6a60c7b091d011ac8f5e1d89c.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"email\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"email\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.1988d451e5f292317bd300310e71c806.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Html\\InputHiddenTypeAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"url\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":43},"diff":"@@ @@\r\n     public function insertHiddenToken()\r\n     {\r\n         \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\r\n-        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n+        $hidden = \"<input type=\\\"url\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\r\n         return $hidden;\r\n     }\r\n     public function validateCSRFToken($submittedToken)","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.3b5430f07d9be5174d61803bba69b78f.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcasecmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return strcasecmp($expected, $submittedToken);\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.ea9ba97f1c46e05a322c75b25cc433d7.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.014, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcoll($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return strcoll($expected, $submittedToken);\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.8d67497dc1e9faf3160987341415d579.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return levenshtein($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return levenshtein($expected, $submittedToken);\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.34dab3d33a193e7986906dec212337a9.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 183 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"RandomBytesToOpenSslRandomPseudoBytes","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(openssl_random_pseudo_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":67},"diff":"@@ @@\r\n     {\r\n         $this->unsetToken();\r\n         if (empty($this->session[$this->sessionTokenLabel])) {\r\n-            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\r\n+            $this->session[$this->sessionTokenLabel] = bin2hex(openssl_random_pseudo_bytes($this->tokenLen));\r\n         }\r\n         if ($this->hmac_ip !== false) {\r\n             $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.d002a3bb0916dd3a2b483bc3f5c296ab.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 191 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"RandomBytesToRandomInt","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_int(0, $this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":67},"diff":"@@ @@\r\n     {\r\n         $this->unsetToken();\r\n         if (empty($this->session[$this->sessionTokenLabel])) {\r\n-            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\r\n+            $this->session[$this->sessionTokenLabel] = bin2hex(random_int(0, $this->tokenLen));\r\n         }\r\n         if ($this->hmac_ip !== false) {\r\n             $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.18b5dd4761337cfb5a71983d44f92126.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.023, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\RandomBytesToRandMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(rand(0, $this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":67},"diff":"@@ @@\r\n     {\r\n         $this->unsetToken();\r\n         if (empty($this->session[$this->sessionTokenLabel])) {\r\n-            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\r\n+            $this->session[$this->sessionTokenLabel] = bin2hex(rand(0, $this->tokenLen));\r\n         }\r\n         if ($this->hmac_ip !== false) {\r\n             $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.5721114d7a75374f25ee325cb135d7dc.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.016, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('Md5', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('Md5', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.34b8fd6a670c77d39474b09f9954a903.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('Whirlpool', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('Whirlpool', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.6d1362defcb868148e86e9bf7d12f7e3.infection.xml\r\n\r\n...                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 187 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.015, Memory: 10.00 MB\r\n\r\nOK (3 tests, 3 assertions)"}],"timeouted":[],"killed":[{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return $expected === $submittedToken;\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return $expected === $submittedToken;\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.190f1cb18c0a75b8472d68e4abd6d301.infection.xml\r\n\r\n..F                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 235 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.027, Memory: 10.00 MB\r\n\r\nThere was 1 failure:\r\n\r\n1) Tests\\CWE352CSRFTest::testValidateCSRFToken\r\nFailed asserting that true is identical to 0.\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:40\r\n\r\nFAILURES!\r\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return $expected == $submittedToken;\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return $expected == $submittedToken;\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.68d726e8943597ac6f771954f7c8a0e6.infection.xml\r\n\r\n..F                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 235 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.029, Memory: 10.00 MB\r\n\r\nThere was 1 failure:\r\n\r\n1) Tests\\CWE352CSRFTest::testValidateCSRFToken\r\nFailed asserting that true is identical to 0.\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:40\r\n\r\nFAILURES!\r\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\StrcmpToEqualityAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return hash_equals($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":60},"diff":"@@ @@\r\n             $expected = $this->session[$this->sessionTokenLabel];\r\n         }\r\n         \/\/return hash_equals($expected, $submittedToken);\r\n-        return strcmp($expected, $submittedToken);\r\n+        return hash_equals($expected, $submittedToken);\r\n     }\r\n     public function getCSRFToken()\r\n     {","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.0f504d0a596a3265ad9273d1123c251b.infection.xml\r\n\r\n..F                                                                 3 \/ 3 (100%)\r\nNotice: fwrite(): Write of 235 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.026, Memory: 10.00 MB\r\n\r\nThere was 1 failure:\r\n\r\n1) Tests\\CWE352CSRFTest::testValidateCSRFToken\r\nFailed asserting that true is identical to 0.\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:40\r\n\r\nFAILURES!\r\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('SHA-1', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('SHA-1', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.d11be3f2ca6034f7fc6f4bd21204b80d.infection.xml\r\n\r\n.E\r\nNotice: fwrite(): Write of 188 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.026, Memory: 10.00 MB\r\n\r\nThere was 1 error:\r\n\r\n1) Tests\\CWE352CSRFTest::testCsrfTokenGeneration\r\nValueError: hash_hmac(): Argument #1 ($algo) must be a valid cryptographic hashing algorithm\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:80\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:62\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:34\r\n\r\nERRORS!\r\nTests: 2, Assertions: 1, Errors: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('SHA-256', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('SHA-256', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.0d13c748bf198362255a61cd222fca2c.infection.xml\r\n\r\n.E\r\nNotice: fwrite(): Write of 188 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.026, Memory: 10.00 MB\r\n\r\nThere was 1 error:\r\n\r\n1) Tests\\CWE352CSRFTest::testCsrfTokenGeneration\r\nValueError: hash_hmac(): Argument #1 ($algo) must be a valid cryptographic hashing algorithm\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:80\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:62\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:34\r\n\r\nERRORS!\r\nTests: 2, Assertions: 1, Errors: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('SHA-512', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('SHA-512', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.c499a97b086309533623c304c63c485f.infection.xml\r\n\r\n.E\r\nNotice: fwrite(): Write of 188 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.027, Memory: 10.00 MB\r\n\r\nThere was 1 error:\r\n\r\n1) Tests\\CWE352CSRFTest::testCsrfTokenGeneration\r\nValueError: hash_hmac(): Argument #1 ($algo) must be a valid cryptographic hashing algorithm\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:80\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:62\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:34\r\n\r\nERRORS!\r\nTests: 2, Assertions: 1, Errors: 1."},{"mutator":{"mutatorName":"App\\Mutator\\Security\\HashHmacAlgoAlternativesMutator","originalSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace App;\n\nclass UserProfileRead\n{\n    private $formTokenLabel = 'eg-csrf-token-label';\n    private $sessionTokenLabel = 'EG_CSRF_TOKEN_SESS_IDX';\n    public $tokenLen = 200;\n    private $post = [];\n    private $session = [];\n    private $server = [];\n    private $excludeUrl = [];\n    public $hashAlgo = 'sha256';\n    private $hmac_ip = true;\n    public $hmacData = 'ABCeNBHVe3kmAqvU2s7yyuJSF2gpxKLC&*#@!$~%';\n    \/*public function getProfileByUserId(string $userId): string\n        {\n            \/\/ \u2757 Vulnerable: does not check ownership or session\n            $base = __DIR__ . '\/..\/vulnerable_files\/users\/';\n            $path = realpath($base . $userId . '\/profile.txt');\n    \n            if ($path && str_starts_with($path, realpath($base))) {\n                return file_get_contents($path);\n            }\n    \n            return 'Profile not found or access denied';\n        }*\/\n    \/\/FUNGSI CSRF\n    public function xssafe($data, $encoding = 'UTF-8')\n    {\n        return htmlspecialchars($data, ENT_QUOTES | ENT_HTML401, $encoding);\n    }\n    public function insertHiddenToken()\n    {\n        \/\/$hidden = \"<!--\\n--><input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=\\\"\" . $_COOKIE[\"PHPSESSID\"] . \"\\\"\" . \" \/>\";\n        $hidden = \"<input type=\\\"hidden\\\"\" . \" name=\\\"token-csrf\\\"\" . \" value=12345\" . \" \/>\";\n        return $hidden;\n    }\n    public function validateCSRFToken($submittedToken)\n    {\n        $this->session[$this->sessionTokenLabel] = 'EG_CSRF_TOKEN_SESS_IDX';\n        if (!isset($this->session[$this->sessionTokenLabel])) {\n            \/\/ CSRF Token not found\n            return false;\n        }\n        if ($this->hmac_ip !== false) {\n            $expected = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $expected = $this->session[$this->sessionTokenLabel];\n        }\n        \/\/return hash_equals($expected, $submittedToken);\n        return strcmp($expected, $submittedToken);\n    }\n    public function getCSRFToken()\n    {\n        $this->unsetToken();\n        if (empty($this->session[$this->sessionTokenLabel])) {\n            $this->session[$this->sessionTokenLabel] = bin2hex(random_bytes($this->tokenLen));\n        }\n        if ($this->hmac_ip !== false) {\n            $token = $this->hMacWithIp($this->session[$this->sessionTokenLabel]);\n        } else {\n            $token = $this->session[$this->sessionTokenLabel];\n        }\n        return $token;\n    }\n    public function unsetToken()\n    {\n        if (!empty($this->session[$this->sessionTokenLabel])) {\n            unset($this->session[$this->sessionTokenLabel]);\n        }\n    }\n    \/\/F2\n    public function hMacWithIp($token)\n    {\n        \/\/based on\n        \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\n        $message = \"12345!\" . $token;\n        $hashHmac = \\hash_hmac('RIPEMD-160', $message, $this->hmacData);\n        return $hashHmac;\n    }\n}","originalFilePath":"D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php","originalStartLine":87},"diff":"@@ @@\r\n         \/\/based on\r\n         \/\/$message = $_COOKIE[\"PHPSESSID\"]. \"!\" .$token;\r\n         $message = \"12345!\" . $token;\r\n-        $hashHmac = \\hash_hmac($this->hashAlgo, $message, $this->hmacData);\r\n+        $hashHmac = \\hash_hmac('RIPEMD-160', $message, $this->hmacData);\r\n         return $hashHmac;\r\n     }\r\n }","processOutput":"PHPUnit 10.5.47 by Sebastian Bergmann and contributors.\r\n\r\nRuntime:       PHP 8.2.0\r\nConfiguration: C:\\Users\\Abdurrasyid\\AppData\\Local\\Temp\\infection\\phpunitConfiguration.b65a4c892e6967a690dcb1acaf504493.infection.xml\r\n\r\n.E\r\nNotice: fwrite(): Write of 188 bytes failed with errno=13 Permission denied in D:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\vendor\\infection\\include-interceptor\\src\\IncludeInterceptor.php on line 359\r\n\r\n\r\nTime: 00:00.025, Memory: 10.00 MB\r\n\r\nThere was 1 error:\r\n\r\n1) Tests\\CWE352CSRFTest::testCsrfTokenGeneration\r\nValueError: hash_hmac(): Argument #1 ($algo) must be a valid cryptographic hashing algorithm\r\n\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:80\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\src\\UserProfileRead.php:62\r\nD:\\Kegiatanku\\S3\\Semester 8\\PPT\\Kelompok 3 IPL\\traversal-vulnerabilities-main_CSRF\\traversal-vulnerabilities-main\\tests\\CWE352CSRFTest.php:34\r\n\r\nERRORS!\r\nTests: 2, Assertions: 1, Errors: 1."}],"killedByStaticAnalysis":[],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}